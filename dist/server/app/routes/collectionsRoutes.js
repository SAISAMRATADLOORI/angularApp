"use strict";
var express = require("express");
var mongodb_1 = require("mongodb");
var config = require("../config");
var router = express.Router();
exports.router = router;
var rootPath = "/";
var collectionsPath = "/collections";
var listOfRuns = "/collections/:collectionId/runs";
var listOfRunsDocs = "/collections/:collectionId";
var runInfo = "/collections/:collectionId/runs/:runId";
router.get(rootPath, function (req, res) {
    res.redirect(collectionsPath);
});
router.get(collectionsPath, function (req, res) {
    var components = [];
    var mongoClient = new mongodb_1.MongoClient();
    mongoClient.connect(config.mongoDBConnectionString).then(function (db) {
        console.log("Connected to DB successfully");
        var out = [];
        db.collections().then(function (collections) {
            collections.forEach(function (collection) {
                console.log("Collection Name - " + collection.collectionName);
                out.push(collection.collectionName);
            });
            db.close();
            res.send(out);
        });
    }).catch(function (reason) {
        res.status(500).send(reason);
    });
});
router.get(listOfRuns, function (req, res) {
    var components = [];
    var mongoClient = new mongodb_1.MongoClient();
    mongoClient.connect(config.mongoDBConnectionString).then(function (db) {
        console.log("Connected to DB successfully");
        db.collection(req.params.collectionId).distinct("runId", {}, function (err, data) {
            console.log("Data - " + data);
            if (err) {
                res.send(500, "Something wrong " + err);
            }
            db.close();
            res.json(data);
        });
    }).catch(function (reason) {
        res.status(500).send(reason);
    });
});
router.get(listOfRunsDocs, function (req, res) {
    var components = [];
    var mongoClient = new mongodb_1.MongoClient();
    mongoClient.connect(config.mongoDBConnectionString).then(function (db) {
        console.log("Connected to DB successfully");
        db.collection(req.params.collectionId).find(req.query).toArray(function (err, data) {
            data.forEach(function (row) {
                console.log("URI - " + row.uri);
            });
            if (err) {
                res.send(500, "Something wrong " + err);
            }
            db.close();
            res.json(data);
        });
    }).catch(function (reason) {
        res.status(500).send(reason);
    });
});
router.get(runInfo, function (req, res) {
    var components = [];
    var mongoClient = new mongodb_1.MongoClient();
    mongoClient.connect(config.mongoDBConnectionString).then(function (db) {
        console.log("Connected to DB successfully");
        db.collection(req.params.collectionId).find({ "runId": Number(req.params.runId) }).toArray(function (err, data) {
            var runIdInfo = {};
            var status = "passed";
            var percentage = 0;
            var totalCount = 0;
            var passCount = 0;
            console.log(data);
            data.forEach(function (row) {
                ++totalCount;
                runIdInfo['environment'] = row.environment;
                runIdInfo['browser'] = row.browser;
                runIdInfo['time'] = new Date(Number(req.params.runId));
                runIdInfo['category'] = row.category;
                console.log("Row status - " + row.status);
                if (row.status !== "passed") {
                    status = "failed";
                }
                else {
                    ++passCount;
                }
                console.log("URI - " + runIdInfo);
            });
            percentage = passCount / totalCount * 100;
            runIdInfo['percentage'] = percentage.toString();
            runIdInfo['status'] = status;
            runIdInfo['data'] = data;
            if (err) {
                res.send(500, "Something wrong " + err);
            }
            db.close();
            res.json(runIdInfo);
        });
    }).catch(function (reason) {
        res.status(500).send(reason);
    });
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,
